import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ContentType
import sqlite3
from config import BOT_TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS message_links
                 (admin_message_id INTEGER PRIMARY KEY,
                  user_id INTEGER,
                  user_message_id INTEGER,
                  chat_id INTEGER,
                  username TEXT)''')
    conn.commit()
    conn.close()

def save_message_link(admin_message_id, user_id, user_message_id, chat_id, username):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute("INSERT INTO message_links VALUES (?, ?, ?, ?, ?)",
              (admin_message_id, user_id, user_message_id, chat_id, username))
    conn.commit()
    conn.close()

def get_user_by_admin_message(admin_message_id):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute("SELECT * FROM message_links WHERE admin_message_id=?", (admin_message_id,))
    result = c.fetchone()
    conn.close()
    return result

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def format_user_info(user, chat_id):
    return (f"üë§ *–û—Ç:* {user.first_name or ''} {user.last_name or ''}\n"
            f"üìõ @{user.username or '–Ω–µ—Ç'}\n"
            f"üÜî ID: `{user.id}`\n"
            f"üí¨ Chat ID: `{chat_id}`")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Å—É–ø–µ—Ä-—É–º–Ω—ã–π –ò–ò –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è. "
        "–ú–æ–∂–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–ï–ö–°–¢–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.content_type == ContentType.TEXT, F.from_user.id != ADMIN_ID)
async def handle_user_text(message: Message):
    user = message.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* {message.text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    admin_message = await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_text,
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–û–¢–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(F.content_type == ContentType.PHOTO, F.from_user.id != ADMIN_ID)
async def handle_user_photo(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üì∑ *–§–æ—Ç–æ*"
    if message.caption:
        admin_text += f"\nüìù *–ü–æ–¥–ø–∏—Å—å:* {message.caption}"
    
    admin_message = await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=message.photo[-1].file_id,
        caption=admin_text,
        parse_mode="Markdown"
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ì–û–õ–û–°–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.content_type == ContentType.VOICE, F.from_user.id != ADMIN_ID)
async def handle_user_voice(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üé§ *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*"
    
    admin_message = await bot.send_voice(
        chat_id=ADMIN_ID,
        voice=message.voice.file_id,
        caption=admin_text,
        parse_mode="Markdown"
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–ò–î–ï–û —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.content_type == ContentType.VIDEO_NOTE, F.from_user.id != ADMIN_ID)
async def handle_user_video_note(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üìπ *–í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ*"
    
    admin_message = await bot.send_video_note(
        chat_id=ADMIN_ID,
        video_note=message.video_note.file_id,
        caption=admin_text
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–¢–ò–ö–ï–†–û–í
@dp.message(F.content_type == ContentType.STICKER, F.from_user.id != ADMIN_ID)
async def handle_user_sticker(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"ü©∑ *–°—Ç–∏–∫–µ—Ä*"
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_message = await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_text,
        parse_mode="Markdown"
    )
    
    # –ó–∞—Ç–µ–º —Å—Ç–∏–∫–µ—Ä
    admin_message = await bot.send_sticker(
        chat_id=ADMIN_ID,
        sticker=message.sticker.file_id
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–û–ö–£–ú–ï–ù–¢–û–í
@dp.message(F.content_type == ContentType.DOCUMENT, F.from_user.id != ADMIN_ID)
async def handle_user_document(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üìé *–î–æ–∫—É–º–µ–Ω—Ç:* {message.document.file_name}"
    if message.caption:
        admin_text += f"\nüìù *–ü–æ–¥–ø–∏—Å—å:* {message.caption}"
    
    admin_message = await bot.send_document(
        chat_id=ADMIN_ID,
        document=message.document.file_id,
        caption=admin_text,
        parse_mode="Markdown"
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–ò–î–ï–û
@dp.message(F.content_type == ContentType.VIDEO, F.from_user.id != ADMIN_ID)
async def handle_user_video(message: Message):
    user = message.from_user
    
    admin_text = f"{format_user_info(user, message.chat.id)}\n\n"
    admin_text += f"üé• *–í–∏–¥–µ–æ*"
    if message.caption:
        admin_text += f"\nüìù *–ü–æ–¥–ø–∏—Å—å:* {message.caption}"
    
    admin_message = await bot.send_video(
        chat_id=ADMIN_ID,
        video=message.video.file_id,
        caption=admin_text,
        parse_mode="Markdown"
    )
    
    save_message_link(
        admin_message_id=admin_message.message_id,
        user_id=user.id,
        user_message_id=message.message_id,
        chat_id=message.chat.id,
        username=user.username or user.first_name
    )
    
    logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–∏–¥–µ–æ –æ—Ç {user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –û–¢–í–ï–¢–û–í –ê–î–ú–ò–ù–ê (—Ä–µ–ø–ª–∞–µ–≤)
@dp.message(F.from_user.id == ADMIN_ID, F.reply_to_message)
async def handle_admin_reply(message: Message):
    reply_to_id = message.reply_to_message.message_id
    
    # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    original = get_user_by_admin_message(reply_to_id)
    if not original:
        await message.reply("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    user_chat_id = original[3]  # chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = original[4]      # username
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.text:
            await bot.send_message(chat_id=user_chat_id, text=message.text)
        elif message.photo:
            await bot.send_photo(
                chat_id=user_chat_id,
                photo=message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.voice:
            await bot.send_voice(chat_id=user_chat_id, voice=message.voice.file_id)
        elif message.video_note:
            await bot.send_video_note(chat_id=user_chat_id, video_note=message.video_note.file_id)
        elif message.sticker:
            await bot.send_sticker(chat_id=user_chat_id, sticker=message.sticker.file_id)
        elif message.document:
            await bot.send_document(
                chat_id=user_chat_id,
                document=message.document.file_id,
                caption=message.caption
            )
        elif message.video:
            await bot.send_video(
                chat_id=user_chat_id,
                video=message.video.file_id,
                caption=message.caption
            )
        else:
            await message.reply("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())