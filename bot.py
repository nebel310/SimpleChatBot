from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import random
import logging

from config import BOT_TOKEN
from llm_client import llm_client
from user_profiles import get_user_profile, update_user_profile, increment_message_count

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class ProfileStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_companion_gender = State()
    waiting_for_companion_age = State()
    waiting_for_name = State()

# –ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
FALLBACK_ANSWERS = [
    "–ß—ë –∫–∞–≤–æ? –Ø —Å–µ–π—á–∞—Å —Ç—É–ø–ª—é...",
    "–ê—Å—å? –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏",
    "–ó–∞–Ω—è—Ç, –º–µ–º—ã —Å–º–æ—Ç—Ä—é, –ø–æ—Ç–æ–º –æ—Ç–≤–µ—á—É",
    "–¢—ã –ø—Ä–æ —á—Ç–æ? –û–±—ä—è—Å–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
    "–ú–æ–≥ –±—ã –±—ã—Ç—å –∫–∞–∫ –ò–ª–æ–Ω –ú–∞—Å–∫, –Ω–æ –ª–µ–Ω—å",
    "–ì–æ–Ω–∏—à—å))",
    "–°–∞–º —Ç–∞–∫–æ–π!",
    "–ù–∞–ø–∏—à–∏ –ø–æ—Ç–æ–º, –∞? –ê —Ç–æ —è –∑–∞–Ω—è—Ç",
    "–ß—ë—Ç —Å–∫—É—á–Ω–æ... –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–º–µ—à–Ω–æ–µ",
    "–Ø –±–æ—Ç, –∞ —Ç—ã –∫—Ç–æ? –ù–∞–ø–æ–º–Ω–∏",
    "–°–µ—Ä—å—ë–∑–Ω–æ? –û_–æ",
    "–ù—É —Ç—ã –≤–∞—â–µ...",
    "–ê—Ö–∞—Ö, —Ö–æ—Ä–æ—à!",
    "–ò —á–æ –¥–∞–ª—å—à–µ?",
    "–ú–Ω–µ –ø–æ—Ö—É–π –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ",
    "–ù–æ—Ä–º —Ç–µ–º–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π",
    "–ë—Ä–æ, —è –≤ –∞—Ö—É–µ...",
    "–≠—Ç–æ —Ç—ã —Ç–∞–∫ –∫–æ –º–Ω–µ –ø–æ–¥–∫–∞—Ç—ã–≤–∞–µ—à—å?",
    "–ü–æ–≥–æ–¥–∏, —è —á–∏–ø—Å—ã –¥–æ–µ–º",
    "–û–ø—è—Ç—å —Ç—ã —Å–æ —Å–≤–æ–∏–º –¥–∏–∞–ª–æ–≥–æ–º..."
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_gender_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë¶ –ú–∞–ª—å—á–∏–∫"), KeyboardButton(text="üëß –î–µ–≤–æ—á–∫–∞")],
            [KeyboardButton(text="ü§∑ –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_companion_gender_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë¶ –•–æ—á—É –æ–±—â–∞—Ç—å—Å—è —Å –º–∞–ª—å—á–∏–∫–æ–º"), KeyboardButton(text="üëß –•–æ—á—É –æ–±—â–∞—Ç—å—Å—è —Å –¥–µ–≤–æ—á–∫–æ–π")],
            [KeyboardButton(text="ü§∑ –ù–µ –≤–∞–∂–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_age_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="13-17"), KeyboardButton(text="18-25")],
            [KeyboardButton(text="26-35"), KeyboardButton(text="36+")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_companion_age_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–æ–≤–µ—Å–Ω–∏–∫(—Ü–∞)"), KeyboardButton(text="–ß—É—Ç—å —Å—Ç–∞—Ä—à–µ")],
            [KeyboardButton(text="–ß—É—Ç—å –º–ª–∞–¥—à–µ"), KeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        f"–Ø –±–æ—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è üé≠\n"
        f"–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –º–Ω–µ –±—ã–ª–æ –ø—Ä–æ—â–µ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(ProfileStates.waiting_for_gender)

@dp.message(Command("help"))
async def help_cmd(message: Message):
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è  
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
‚Ä¢ –ú–æ–≥—É –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±—ã–º (–ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏)
‚Ä¢ –°—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª—é–±—ã–µ —Ç–µ–º—ã

<b>–ö–Ω–æ–ø–∫–∏:</b>
üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API.
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message(Command("settings"))
async def settings_cmd(message: Message, state: FSMContext):
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=get_gender_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ProfileStates.waiting_for_gender)

@dp.message(Command("profile"))
async def profile_cmd(message: Message):
    profile = get_user_profile(message.from_user.id)
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    gender_emoji = "üë¶" if profile['user_gender'] == "–º–∞–ª—å—á–∏–∫" else "üëß" if profile['user_gender'] == "–¥–µ–≤–æ—á–∫–∞" else "ü§∑"
    companion_emoji = "üë¶" if profile['companion_gender'] == "–º–∞–ª—å—á–∏–∫" else "üëß" if profile['companion_gender'] == "–¥–µ–≤–æ—á–∫–∞" else "ü§∑"
    
    profile_text = f"""
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

{gender_emoji} <b>–¢—ã:</b> {profile['user_gender']}, {profile['user_age']}
üìõ <b>–ò–º—è:</b> {profile['user_name']}
{companion_emoji} <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫:</b> {profile['companion_gender']}, {profile['companion_age']}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {profile.get('messages_count', 0)}

–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /settings
    """
    await message.answer(profile_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: Message):
    await help_cmd(message)

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_button(message: Message, state: FSMContext):
    await settings_cmd(message, state)

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: Message):
    await profile_cmd(message)

@dp.message(F.text == "üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å")
async def chat_button(message: Message):
    profile = get_user_profile(message.from_user.id)
    if profile['user_gender'] == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ù–∞–ø–∏—à–∏ /start")
        return
        
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {profile['user_name']}! üí¨\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å - –æ—Ç–≤–µ—á—É –∫–∞–∫ {profile['companion_gender']} {profile['companion_age']} –ª–µ—Ç!",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(ProfileStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender_map = {
        "üë¶ –ú–∞–ª—å—á–∏–∫": "–º–∞–ª—å—á–∏–∫",
        "üëß –î–µ–≤–æ—á–∫–∞": "–¥–µ–≤–æ—á–∫–∞", 
        "ü§∑ –î—Ä—É–≥–æ–µ": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    }
    
    gender = gender_map.get(message.text, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    update_user_profile(message.from_user.id, user_gender=gender)
    
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_age_keyboard())
    await state.set_state(ProfileStates.waiting_for_age)

@dp.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if message.text not in ["13-17", "18-25", "26-35", "36+"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=get_age_keyboard())
        return
        
    update_user_profile(message.from_user.id, user_age=message.text)
    
    await message.answer("–° –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è?", reply_markup=get_companion_gender_keyboard())
    await state.set_state(ProfileStates.waiting_for_companion_gender)

@dp.message(ProfileStates.waiting_for_companion_gender)
async def process_companion_gender(message: Message, state: FSMContext):
    gender_map = {
        "üë¶ –•–æ—á—É –æ–±—â–∞—Ç—å—Å—è —Å –º–∞–ª—å—á–∏–∫–æ–º": "–º–∞–ª—å—á–∏–∫",
        "üëß –•–æ—á—É –æ–±—â–∞—Ç—å—Å—è —Å –¥–µ–≤–æ—á–∫–æ–π": "–¥–µ–≤–æ—á–∫–∞",
        "ü§∑ –ù–µ –≤–∞–∂–Ω–æ": "–Ω–µ –≤–∞–∂–Ω–æ"
    }
    
    companion_gender = gender_map.get(message.text, "–Ω–µ –≤–∞–∂–Ω–æ")
    update_user_profile(message.from_user.id, companion_gender=companion_gender)
    
    await message.answer("–ö–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫?", reply_markup=get_companion_age_keyboard())
    await state.set_state(ProfileStates.waiting_for_companion_age)

@dp.message(ProfileStates.waiting_for_companion_age)
async def process_companion_age(message: Message, state: FSMContext):
    age_map = {
        "–†–æ–≤–µ—Å–Ω–∏–∫(—Ü–∞)": "—Ä–æ–≤–µ—Å–Ω–∏–∫",
        "–ß—É—Ç—å —Å—Ç–∞—Ä—à–µ": "—á—É—Ç—å —Å—Ç–∞—Ä—à–µ",
        "–ß—É—Ç—å –º–ª–∞–¥—à–µ": "—á—É—Ç—å –º–ª–∞–¥—à–µ", 
        "–ù–µ –≤–∞–∂–Ω–æ": "–Ω–µ –≤–∞–∂–Ω–æ"
    }
    
    companion_age = age_map.get(message.text, "–Ω–µ –≤–∞–∂–Ω–æ")
    update_user_profile(message.from_user.id, companion_age=companion_age)
    
    await message.answer(
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–ª–∏ –∫–∞–∫ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å)\n\n"
        "<i>–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ –∏–º—è –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–µ</i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ProfileStates.waiting_for_name)

@dp.message(ProfileStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    user_name = message.text.strip() if message.text.strip() else "–¥—Ä—É–≥"
    update_user_profile(message.from_user.id, user_name=user_name)
    
    profile = get_user_profile(message.from_user.id)
    
    await message.answer(
        f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ, {user_name}!</b>\n\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∫–∞–∫ <b>{profile['companion_gender']} {profile['companion_age']}</b> –ª–µ—Ç.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞! ‚ú®",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def ai_reply(message: Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text.startswith('/') or len(message.text) > 500:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    profile = get_user_profile(message.from_user.id)
    if profile['user_gender'] == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
        await message.answer(
            "ü§î –°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n"
            "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    increment_message_count(message.from_user.id)
    
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (1-5 —Å–µ–∫—É–Ω–¥)
    delay = random.uniform(1, 5)
    await asyncio.sleep(delay)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(message.chat.id, "typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
    ai_response = await llm_client.get_response(message.from_user.id, message.text)
    
    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if any(ai_response.startswith(prefix) for prefix in ['‚ùå', '‚ö†Ô∏è', '‚ö†', '–û—à–∏–±–∫–∞']):
        logger.warning(f"API Error for user {message.from_user.id}: {ai_response}")
        ai_response = random.choice(FALLBACK_ANSWERS)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await asyncio.sleep(random.uniform(0.5, 2))
    await message.answer(ai_response, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update, exception):
    logger.error(f"–û—à–∏–±–∫–∞: {exception}", exc_info=True)
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª")
        return
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())